version: '3.8'

services:
  # AI-Powered Observability Agent with Quantum Analytics
  observability-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quantum-ai-observability-agent
    ports:
      - "8000:8000"
    environment:
      # Copado Configuration
      - COPADO_API_URL=${COPADO_API_URL:-https://api.copado.com}
      - COPADO_AI_API_KEY=${COPADO_AI_API_KEY}
      - COPADO_CICD_API_KEY=${COPADO_CICD_API_KEY}
      
      # Salesforce Configuration
      - SALESFORCE_INSTANCE_URL=${SALESFORCE_INSTANCE_URL}
      - SALESFORCE_CLIENT_ID=${SALESFORCE_CLIENT_ID}
      - SALESFORCE_CLIENT_SECRET=${SALESFORCE_CLIENT_SECRET}
      - SALESFORCE_USERNAME=${SALESFORCE_USERNAME}
      - SALESFORCE_PASSWORD=${SALESFORCE_PASSWORD}
      
      # GitHub Configuration
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}
      
      # Notification Configuration
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - TEAMS_WEBHOOK_URL=${TEAMS_WEBHOOK_URL}
      
      # Database Configuration
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./data/observability_agent.db}
      
      # Application Configuration
      - APP_HOST=0.0.0.0
      - APP_PORT=8000
      - DEBUG=${DEBUG:-false}
      
      # Quantum Analytics Configuration
      - QUANTUM_CACHE_SIZE=${QUANTUM_CACHE_SIZE:-1000}
      - ML_MODEL_PATH=${ML_MODEL_PATH:-/app/ml_models}
      - ENABLE_QUANTUM_ANALYTICS=${ENABLE_QUANTUM_ANALYTICS:-true}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./quantum_cache:/app/quantum_cache
      - ./ml_models:/app/ml_models
    networks:
      - observability-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Extended for quantum analytics initialization
    depends_on:
      - redis
      - postgres

  # Redis for quantum analytics caching and session management
  redis:
    image: redis:7-alpine
    container_name: quantum-observability-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - observability-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for quantum analytics and incident data
  postgres:
    image: postgres:15-alpine
    container_name: quantum-observability-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-observability_agent}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - observability-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy with quantum analytics support
  nginx:
    image: nginx:alpine
    container_name: quantum-observability-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - observability-network
    restart: unless-stopped
    depends_on:
      - observability-agent
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  observability-network:
    driver: bridge
